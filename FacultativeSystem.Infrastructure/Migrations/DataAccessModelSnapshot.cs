// <auto-generated />
using System;
using FacultativeSystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FacultativeSystem.Infrastructure.Migrations
{
    [DbContext(typeof(DataAccess))]
    partial class DataAccessModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseEntityStudentEntity", b =>
                {
                    b.Property<Guid>("CourseEntitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentEntitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("CourseEntitiesId", "StudentEntitiesId");

                    b.HasIndex("StudentEntitiesId");

                    b.ToTable("CourseEntityStudentEntity");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.CourseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.StudentCourseGradeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GradedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourseGrades");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.StudentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.TeacherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StudentEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentEntityId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CourseEntityStudentEntity", b =>
                {
                    b.HasOne("FacultativeSystem.Domain.Entities.CourseEntity", null)
                        .WithMany()
                        .HasForeignKey("CourseEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacultativeSystem.Domain.Entities.StudentEntity", null)
                        .WithMany()
                        .HasForeignKey("StudentEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.CourseEntity", b =>
                {
                    b.HasOne("FacultativeSystem.Domain.Entities.TeacherEntity", "TeacherEntities")
                        .WithOne("CourseEntities")
                        .HasForeignKey("FacultativeSystem.Domain.Entities.CourseEntity", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherEntities");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.StudentCourseGradeEntity", b =>
                {
                    b.HasOne("FacultativeSystem.Domain.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FacultativeSystem.Domain.Entities.StudentEntity", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.TeacherEntity", b =>
                {
                    b.HasOne("FacultativeSystem.Domain.Entities.StudentEntity", null)
                        .WithMany("TeacherEntities")
                        .HasForeignKey("StudentEntityId");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.StudentEntity", b =>
                {
                    b.Navigation("TeacherEntities");
                });

            modelBuilder.Entity("FacultativeSystem.Domain.Entities.TeacherEntity", b =>
                {
                    b.Navigation("CourseEntities")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
